import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'idea'
    id "org.jetbrains.kotlin.jvm" version "1.3.0"
    id "com.github.johnrengelman.shadow" version "4.0.2"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation project(path: ':common')

    implementation fileTree(dir: "lib", include: "*.jar")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'no.tornado:tornadofx:1.7.17'
    api group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14'
    
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jackson_version
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.25.2'

    implementation 'khttp:khttp:0.1.0'

    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4j_version

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    Properties properties = new Properties()
    properties.load(new File(project.rootDir, "local.properties").newDataInputStream())
    systemProperties(properties)
}

task run(type: JavaExec, dependsOn: build) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.ironpanthers.scouting.desktop.ScoutingSystemApplicationKt"
}

task runEmulator1(type: JavaExec, dependsOn: build) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty("bluecove.stack", "emulator")
    systemProperty("com.ironpanthers.scouting.desktop.tag", "emu1")
    main = "com.ironpanthers.scouting.desktop.ScoutingSystemApplicationKt"
}

task runEmulator2(type: JavaExec, dependsOn: build) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty("bluecove.stack", "emulator")
    systemProperty("com.ironpanthers.scouting.desktop.tag", "emu2")
    main = "com.ironpanthers.scouting.desktop.ScoutingSystemApplicationKt"
}

task runEmulator3(type: JavaExec, dependsOn: build) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty("bluecove.stack", "emulator")
    systemProperty("com.ironpanthers.scouting.desktop.tag", "emu3")
    main = "com.ironpanthers.scouting.desktop.ScoutingSystemApplicationKt"
}

// java -cp bluecove-2.1.0.jar;bluecove-emu-2.1.0.jar com.intel.bluetooth.emu.EmuServer
task bluecoveEmulator(type: JavaExec) {
    classpath = fileTree(dir: "lib", include: "*.jar")
    main = "com.intel.bluetooth.emu.EmuServer"
}

